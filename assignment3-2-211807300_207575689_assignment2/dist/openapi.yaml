openapi: 3.0.0
info:
  title: recipe - web
  version: 1.0.0
  description: API for user and recipe management in a recipe web app
servers:
  - url: http://localhost:3000
    description: SwaggerHub API Auto Mocking

paths:
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: >
        Registers a new user in the system. The username must be unique. 
        If a user tries to register with an existing username, the server will return 409 Conflict.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input (e.g. password mismatch or username too short)
        '409':
          description: Username already exists
          
  /login:
    post:
      tags:
        - auth
      summary: Login user
      description: Authenticates a user using username and password. On success, the user is considered logged in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid username or password
          
  /logout:
    post:
      tags:
        - auth
      summary: Logout user
      description: Logs out the currently authenticated user.
      responses:
        '200':
          description: Logout successful
        '401':
          description: User not authenticated
          
  /users/me:
    get:
      tags:
        - user
      summary: Get current user info
      description: Returns the username and whether the user is authenticated. Used for customizing the navigation bar.
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: User not authenticated

  /users/me/viewed/{recipeId}:
    post:
      tags:
        - user
      summary: Mark recipe as viewed
      description: Records that the user has viewed/clicked on a specific recipe
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe to mark as viewed
      responses:
        '200':
          description: Recipe successfully marked as viewed
        '400':
          description: Invalid recipe ID
        '401':
          description: Unauthorized - user must be logged in
        '404':
          description: Recipe not found
  
  /users/me/last-watched:
    get:
      tags:
        - user
      summary: Get last watched recipes for current user
      description: Returns the last 3 recipes the logged-in user has viewed.
      responses:
        '200':
          description: A list of last 3 watched recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'

  /users/me/favorites/{recipeId}:
    post:
      tags:
        - user
      summary: Add recipe to favorites
      description: Marks a specific recipe as favorite for the logged-in user
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe to mark as favorite
      responses:
        '200':
          description: Recipe successfully added to favorites
        '400':
          description: Invalid recipe ID
        '401':
          description: Unauthorized - user must be logged in
        '404':
          description: Recipe not found
        '409':
          description: Recipe already in favorites
                  
  /users/me/favorites:
    get:
      tags:
        - user
      summary: Get favorite recipes of the logged-in user
      description: Returns all recipes the user marked as favorite.
      responses:
        '200':
          description: A list of favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '401':
          description: Unauthorized – user must be logged in

  /users/me/recipes:
    post:
      tags:
        - user
      summary: Create a new recipe
      description: 
        Allows an authenticated user to submit a new recipe.
        The recipe will be stored in the database and shown in their personal area under "My Recipes".
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        '201':
          description: Recipe created successfully
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized – user must be logged in

  /users/me/my-recipes:
    get:
      tags:
        - user
      summary: Get user's own created recipes
      description: Returns all recipes created by the currently logged-in user.
      responses:
        '200':
          description: A list of recipes created by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '401':
          description: Unauthorized – user must be logged in
             
  /users/me/family-recipes:
    post:
      tags:
        - user
      summary: Create a new family recipe
      description: 
        Allows an authenticated user to submit a new family recipe.
        The recipe will be stored in the database and shown in their personal area under "My family Recipes".
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRecipe'
      responses:
        '201':
          description: family Recipe created successfully
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized – user must be logged in
    get:
      tags:
        - user
      summary: Get user's family recipes
      description: Returns a list of family recipes added by the user, including information about the family origin of the recipe.
      responses:
        '200':
          description: A list of family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        '401':
          description: Unauthorized – user must be logged in
  
  /users/me/recipes/{id}/startcooking:
    get:
      tags:
        - user
      summary: Start cooking a recipe
      description: >
        Returns the analyzed breakdown of a recipe's instructions (including ingredients, steps, and measures)
        when the logged-in user starts cooking.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe from Spoonacular
      responses:
        '200':
          description: Analyzed recipe instructions and ingredients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreparation'
        '401':
          description: Unauthorized – user must be logged in
        '500':
          description: Server error – Failed to fetch recipe instructions
  
  /users/me/meal-plan:
    post:
      tags:
        - user
      summary: Add recipe to meal plan
      description: Adds a recipe to the user's meal plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: string
                  example: "s_123"
                  description: ID of the recipe to add to the meal plan
                position:
                  type: integer
                  description: Optional position in the meal plan (if not specified, added at the end)
      responses:
        '200':
          description: Recipe successfully added to meal plan
        '400':
          description: Invalid recipe ID
        '401':
          description: Unauthorized - user must be logged in
        '404':
          description: Recipe not found

    get:
      tags:
        - user
      summary: Get user's meal plan
      description: Returns the current meal plan of the logged-in user.
      responses:
        '200':
          description: The user's meal plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealPlan'
        '401':
          description: Unauthorized – user must be logged in
          
          
    delete:
      tags:
        - user
      summary: Clear meal plan
      description: Removes all recipes from the user's meal plan
      responses:
        '200':
          description: Meal plan successfully cleared
        '401':
          description: Unauthorized - user must be logged in
          
  /users/me/meal-plan/{recipeId}:
    delete:
      tags:
        - user
      summary: Remove recipe from meal plan
      description: Removes a specific recipe from the user's meal plan
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe to remove from the meal plan
          example: "abc123"
      responses:
        '200':
          description: Recipe successfully removed from meal plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe successfully removed from meal plan"
                  recipeId:
                    type: string
                    example: "abc123"
                  remainingRecipes:
                    type: integer
                    example: 2
              examples:
                RecipeRemoved:
                  summary: Recipe successfully removed
                  value:
                    message: "Recipe successfully removed from meal plan"
                    recipeId: "abc123"
                    remainingRecipes: 2
                EmptyMealPlan:
                  summary: Last recipe removed
                  value:
                    message: "Recipe successfully removed from meal plan. Your meal plan is now empty."
                    recipeId: "abc123"
                    remainingRecipes: 0
        '400':
          description: Invalid recipe ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid recipe ID format"
        '401':
          description: Unauthorized - user must be logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Authentication required"
        '404':
          description: Recipe not found in meal plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Recipe not found in meal plan"
          
    put:
      tags:
        - user
      summary: Update recipe position in meal plan
      description: Changes the position of a recipe in the user's meal plan
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe to reposition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - position
              properties:
                position:
                  type: integer
                  description: New position in the meal plan (starting from 0)           
      responses:
        '200':
          description: Recipe position successfully updated
        '400':
          description: Invalid recipe ID or position
        '401':
          description: Unauthorized - user must be logged in
        '404':
          description: Recipe not found in meal plan

  /users/me/meal-plan/{recipeId}/complete:
    post:
      tags:
        - user
      summary: Mark recipe as completed in meal plan
      description: Marks a recipe as 100% completed in the user's meal plan
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the recipe to mark as completed
      responses:
        '200':
          description: Recipe successfully marked as completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe marked as completed successfully"
                  recipeId:
                    type: string
                    example: "s_123"
                  progress:
                    type: integer
                    example: 100
        '401':
          description: Unauthorized - user must be logged in
        '404':
          description: Recipe not found in meal plan
  
          
  /recipes/preview:
    get:
      tags:
        - recipe
      summary: Get preview list of recipes
      description: Returns a list of recipe previews to display in the main recipe view.
      responses:
        '200':
          description: A list of recipe previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
                  
  /recipes/explore:
    get:
      tags:
        - recipe
      summary: Get 3 random recipes
      description: Returns 3 random recipes for non-logged in or explore section.
      responses:
        '200':
          description: A list of 3 random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
                  
  /recipes/{recipeId}:
    get:
      tags:
        - recipe
      summary: Get full recipe details
      description: >
        Returns full details of a specific recipe by its ID, including image, title, duration,
        popularity (likes), dietary flags, ingredients list, instructions, and servings.
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Full recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
        '404':
          description: Recipe not found
          

  /recipes/search:
    get:
      tags:
        - recipe
      summary: Search for recipes
      description: >
        Search for recipes by title with optional filters (cuisine, diet, intolerance), 
        sort options (duration, popularity), and limit. Returns full previews including instructions.
        If no results are found, an empty array is returned.
      parameters:
        - name: query
          in: query
          description: Recipe name or keyword
          required: true
          schema:
            type: string
            example: "lasagna"
        - name: cuisine
          in: query
          description: Optional cuisine filter
          schema:
            type: string
            example: "Italian"
        - name: diet
          in: query
          description: Optional diet filter
          schema:
            type: string
            example: "vegan"
        - name: intolerance
          in: query
          description: Optional intolerance filter
          schema:
            type: string
            example: "gluten"
        - name: sortBy
          in: query
          description: Sort by either duration or popularity
          schema:
            type: string
            enum: [duration, popularity]
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            enum: [5, 10, 15]
            default: 5
      responses:
        '200':
          description: List of matching recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
                  
  /about:
    get:
      tags:
        - info
      summary: Get about info (optional)
      description: Returns static information about the project and team (if ever needed dynamically).
      responses:
        '200':
          description: Static content
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                  links:
                    type: array
                    items:
                      type: string
                      format: uri

components:
  schemas:
    Ingredient:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the ingredient
        name:
          type: string
          example: "onion"
          description: Name of the ingredient
        amount:
          type: number
          nullable: true
          example: 1
          description: Amount of the ingredient
        unit:
          type: string
          nullable: true
          example: "piece"
          description: Unit of measurement

    Instruction:
      type: object
      required:
        - number
        - step
      properties:
        number:
          type: integer
          example: 1
          description: Step number
        step:
          type: string
          example: "Cut the onion into small cubes"
          description: Step description

    RegisterUser:
      type: object
      required:
        - username
        - first_name
        - last_name
        - country
        - password
        - confirm_password
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          pattern: "^[A-Za-z]+$"
          example: hadaroni
        first_name:
          type: string
          pattern: "^[A-Za-z]+$"
          example: hadaroni
        last_name:
          type: string
          pattern: "^[A-Za-z]+$"
          example: hadaroni
        country:
          type: string
          example: Israel
        password:
          type: string
          minLength: 5
          maxLength: 10
          example: Pa$$w0rd
          description: Must contain at least one number and one special character
        confirm_password:
          type: string
          example: Pa$$w0rd
        email:
          type: string
          format: email
          example: haadaroni@example.com
          
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: hadaroni
        password:
          type: string
          example: Pa$$w0rd
          
    UserInfo:
      type: object
      properties:
        username:
          type: string
        isAuthenticated:
          type: boolean
          
    RecipePreview:
      type: object
      required:
        - id
        - title
        - image
        - duration
        - likes
        - vegan
        - vegetarian
        - glutenFree
      properties:
        id:
          type: string
          example: "s_716429"
        title:
          type: string
          example: "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs"
        image:
          type: string
          format: uri
          example: "https://spoonacular.com/recipeImages/716429-556x370.jpg"
        duration:
          type: integer
          example: 45
        likes:
          type: integer
          example: 209
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        viewed:
          type: boolean
          example: false
          description: Only present for authenticated users
        isFavorite:
          type: boolean
          example: false
          description: Only present for authenticated users
          
    FullRecipe:
      type: object
      required:
        - id
        - title
        - image
        - duration
        - likes
        - vegan
        - vegetarian
        - glutenFree
        - ingredients
        - instructions
        - servings
      properties:
        id:
          type: string
          example: "s_123"
        title:
          type: string
          example: "Vegan Stir Fry"
        image:
          type: string
          format: uri
          example: "https://example.com/images/stirfry.jpg"
        duration:
          type: integer
          example: 30
        likes:
          type: integer
          example: 1000
        vegan:
          type: boolean
          example: true
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        servings:
          type: integer
          example: 4
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        viewed:
          type: boolean
          example: true
          description: Only present for authenticated users
        isFavorite:
          type: boolean
          example: false
          description: Only present for authenticated users
      
    NewRecipe:
      type: object
      required:
        - title
        - image
        - duration
        - ingredients
        - instructions
        - servings
        - vegan
        - vegetarian
        - glutenFree
      properties:
        title:
          type: string
          example: "Green Thai Curry"
        image:
          type: string
          format: uri
          example: "https://example.com/images/curry.jpg"
        duration:
          type: integer
          example: 30
        servings:
          type: integer
          example: 4
        vegan:
          type: boolean
          example: true
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        likes:
          type: integer
          example: 0
          description: Number of likes, initialized to 0
          
    FamilyRecipe:
      type: object
      required:
        - title
        - image
        - family_member
        - tradition
        - ingredients
        - instructions
      properties:
        title:
          type: string
          example: "Grandma's Passover Soup"
        image:
          type: string
          format: uri
          example: "https://example.com/images/soup.jpg"
        family_member:
          type: string
          description: The name of the person who passed down the recipe
          example: "Grandma Miriam"
        tradition:
          type: string
          description: When the recipe is usually prepared
          example: "Passover dinner"
        duration:
          type: integer
          example: 60
          description: Cooking time in minutes
        likes:
          type: integer
          example: 0
          description: Number of likes
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'

    RecipePreparation:
      type: object
      required:
        - recipeId
        - title
        - duration
        - servings
        - ingredients
        - instructions
      properties:
        recipeId:
          type: string
          example: "s_123"
        title:
          type: string
          example: "Vegan Soup"
        duration:
          type: integer
          example: 45
        servings:
          type: integer
          example: 4
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'

    MealPlan:
      type: object
      properties:
        recipes:
          type: array
          items:
            type: object
            properties:
              recipeId:
                type: string
                example: "s_123"
              title:
                type: string
                example: "Vegan Pasta"
              image:
                type: string
                format: uri
                example: "https://example.com/images/pasta.jpg"
              duration:
                type: integer
                example: 30
              position:
                type: integer
                example: 0
              progress:
                type: integer
                description: Percentage of completion (0-100)
                example: 50