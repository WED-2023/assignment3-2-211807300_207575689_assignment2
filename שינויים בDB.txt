ALTER TABLE users ADD COLUMN profilePic VARCHAR(255);

ALTER TABLE my_recipes ADD COLUMN ingredients TEXT;

צריך לבצע עוד שינויים בDB שימו לב




-- עבור family_recipes
CREATE TABLE family_recipes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    title VARCHAR(255) NOT NULL,
    image TEXT,
    family_member VARCHAR(100) NOT NULL,
    tradition TEXT,
    ingredients JSON NOT NULL, -- אחסון JSON
    instructions JSON NOT NULL -- אחסון JSON
);

ALTER TABLE family_recipes
ADD COLUMN duration INT DEFAULT NULL,
ADD COLUMN likes INT DEFAULT 0,
ADD COLUMN vegan BOOLEAN DEFAULT FALSE,
ADD COLUMN vegetarian BOOLEAN DEFAULT FALSE,
ADD COLUMN glutenFree BOOLEAN DEFAULT FALSE;

-- עבור my_recipes
CREATE TABLE my_recipes (
    recipe_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    image VARCHAR(255) NOT NULL,
    duration INT NOT NULL,
    servings INT NOT NULL,
    likes INT DEFAULT 0,
    is_vegan TINYINT(1) DEFAULT 0,
    is_vegetarian TINYINT(1) DEFAULT 0,
    is_gluten_free TINYINT(1) DEFAULT 0,
    ingredients JSON NOT NULL, -- אחסון JSON
    instructions JSON NOT NULL -- אחסון JSON
);





async function getSelfRecipeDetails(recipe_ids) {
  try {
    if (!Array.isArray(recipe_ids) || recipe_ids.length === 0) {
      return []; // החזר מערך ריק אם אין מזהים
    }

    // המר מזהים למחרוזת עבור SQL
    const idsList = recipe_ids.map(id => `'${id}'`).join(",");

    const recipes = await DButils.execQuery(`
      SELECT recipe_id, title, image, duration, servings, instructions, likes,
             is_vegan, is_vegetarian, is_gluten_free, ingredients
      FROM my_recipes
      WHERE recipe_id IN (${idsList})
    `);

    const formatted = recipes.map(recipe => {
      let ingredients = [];
      let instructions = [];
      
      // פענוח המרכיבים מ-JSON
      try {
        ingredients = JSON.parse(recipe.ingredients);
      } catch (e) {
        console.error(`Error parsing ingredients for recipe ${recipe.recipe_id}:`, e.message);
        // אם פענוח נכשל, נשתמש במערך ריק
      }
      
      // פענוח הוראות ההכנה מ-JSON
      try {
        instructions = JSON.parse(recipe.instructions);
      } catch (e) {
        console.error(`Error parsing instructions for recipe ${recipe.recipe_id}:`, e.message);
        // אם פענוח נכשל, ננסה לפרסר את הטקסט כהוראות
        if (typeof recipe.instructions === 'string') {
          const lines = recipe.instructions.split(/\r?\n/).filter(line => line.trim());
          instructions = lines.map((line, index) => ({
            number: index + 1,
            step: line.trim()
          }));
        }
      }

      return {
        id: recipe.recipe_id,
        title: recipe.title,
        image: recipe.image,
        duration: recipe.duration,
        likes: recipe.likes,
        isVegan: recipe.is_vegan === 1,
        isVegetarian: recipe.is_vegetarian === 1,
        isGlutenFree: recipe.is_gluten_free === 1,
        ingredients: ingredients,
        instructions: instructions,
        servings: recipe.servings
      };
    });

    return formatted;
  } catch (error) {
    console.error("Error in getSelfRecipeDetails:", error);
    throw { status: 500, message: "Failed to get self recipe details: " + error.message };
  }
}